---
title: "Sesion 12"
---

# Aplicaciones relacionadas a la demografía (II)

## Paquetes

```{r}

# Instalación de {DemoTools}
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
# remotes::install_github("timriffe/DemoTools")

if (!require("pacman")) install.packages("pacman") # instala pacman si se requiere
pacman::p_load(tidyverse, 
               haven, foreign, # importación de dta y sav
               sjlabelled,  # etiquetas
               pollster,  # para tabulados
               apyramid, LexisPlotR, ipumsr,  fmsb, DemoTools ) # algunos demográficos

```

## ¡Lexis en R!

El paquete fue creado Philipp Ottolinger, este ejercicio es una versión en español (con algunos comentarios) de su ejemplo <https://github.com/ottlngr/LexisPlotR>

### Dibujar una cuadrícula

Este paquete nos puede ayudar a hacer nuestras cuadrículas. Ponemos los años de inicio y de final; así como las edades de inicio y de final. Recuerda que un diagrama de Lexis debe tener una misma escala en los ejes.

```{r}
# Dibuje una cuadrícula de Lexis desde el año 2010 hasta el año 2015, que representa las edades de 0 a 5 años.
lexis_grid(year_start = 2010, year_end = 2015, age_start = 0, age_end = 5)
```

Aunque no necesariamente podemos dibujar sólo cuadrados

```{r}
# Dibuje una cuadrícula de Lexis desde el año 2010 hasta el año 2015, que representa las edades de 0 a 7 años.

lexis_grid(year_start = 2010, year_end = 2015, age_start = 0, age_end = 7)

```

Si no ponemos nada especifico en un argumento "d=", asume que los deltas son de un año. Pero lo podemos modificar

```{r}
lexis_grid(year_start = 1950, year_end = 2000, age_start = 0, age_end = 50, delta = 5)

```

### Sombreados en el diagrama

Lo más fácil es crear un objeto primero con nuestra cuadrícula sobre la cual graficaremos los elementos del Lexis

```{r}
mi_diagrama <- lexis_grid(year_start = 1995, year_end = 2000, age_start = 0, age_end = 5)

```

```{r}
mi_diagrama
```

Para poder sombrear áreas con este paquete, debemos tener un diagrama ya guardado como objeto. Con distintas funciones vamos sombreando áreas.

#### Edad

```{r}
# Destacar todos los puntos que pertenecen a la edad de 2 años
lexis_age(lg = mi_diagrama, age = 2)

```

¿Qué tipo de observación o estudio sería este?

Para cambiar el color:

```{r}
lexis_age(lg = mi_diagrama, age = 2, fill = "red", alpha = 0.5)
```

#### Periodo

También podemos sombrear períodos

```{r}
lexis_year(lg = mi_diagrama, year=1998)

```

¿Qué tipo de observación o estudio sería este?

Para cambiar el color: \[Más info del color <http://sape.inf.usi.ch/quick-reference/ggplot2/colour>\]

```{r}
lexis_year(lg = mi_diagrama, year=1998, fill = "grey70", alpha = 0.5)
```

#### Cohorte

```{r}
lexis_cohort(lg = mi_diagrama, cohort=1994)
```

¿Qué tipo de observación o estudio sería este?

También podemos cambiar el color y la transparencia:

```{r}
lexis_cohort(lg = mi_diagrama, cohort=1994, fill="plum1", alpha=0.8)
```

#### Líneas de vida

Alguien entra

```{r}
lexis_lifeline(lg = mi_diagrama, birth = "1996-09-23")

```

Alguien entra y sale

```{r}
lexis_lifeline(lg = mi_diagrama, birth =  "1996-09-23", exit="1999-09-23")

```

#### Polígonos

No es tan sencillo, pero podemos dibujar un espacio "APC", o varios.

```{r}

polygons <- data.frame(group = c(1,
                                 1,
                                 1), # es un triángulo
                       x = c("1996-01-01", 
                             "1997-01-01", 
                             "1997-01-01"), # van en fechas
                       y = c(1,
                             1,
                             2)) # van en edades

lexis_polygon(lg = mi_diagrama, x = polygons$x, y = polygons$y, group = polygons$group)
```

checa que básicamente se trata de colocar los puntos que dibujan el polígono. Son tres puntos:

1.  Fecha: "1996-01-01", edad=1

2.  Fecha: "1997-01-01", edad=1

3.  Fecha: "1997-01-01", edad=2

Si queremos más triángulos, podemos agregarlos en el mismo objeto:

```{r}

polygons <- data.frame(group = c(1,
                                 1,
                                 1, # es un triángulo
                                 2, 
                                 2,
                                 2), # es otro triángulo
                       x = c("1996-01-01", 
                             "1997-01-01", 
                             "1997-01-01", # van en fechas 1
                             "1998-01-01", 
                             "1998-01-01", 
                             "1999-01-01"), # van en fechas 2
                       y = c(1,
                             1,
                             2, # van en edades 1
                             3,
                             4,
                             4))# van en edades 2

lexis_polygon(lg = mi_diagrama, x = polygons$x, y = polygons$y, group = polygons$group)
```

#### Todo en uno

Podemos ir reescribiendo nuestro objeto

```{r}
mi_diagrama2 <- lexis_grid(year_start = 1995, year_end = 2000, age_start = 0, age_end = 5)
mi_diagrama2<-lexis_age(lg = mi_diagrama2, age = 2, fill = "red", alpha = 0.5)
mi_diagrama2<-lexis_year(lg = mi_diagrama2, year = 1998)
mi_diagrama2<-lexis_cohort(lg = mi_diagrama2, cohort=1994)
mi_diagrama2<-lexis_lifeline(lg = mi_diagrama2, birth = "1996-09-23", exit="1999-09-23")
mi_diagrama2
```

#### Anotación manual

Para hacer cuadrados

```{r}
mi_diagrama  + 
   annotate("rect", 
            xmin = as.Date("1996-01-01"),
            xmax = as.Date("1997-01-01"), 
            ymin = 0, ymax = 1, alpha = .2)
```

¿Qué tipo de observación es esta?

```{r}
mi_diagrama  + 
   annotate("rect", 
            xmin = as.Date("1996-01-01"),
            xmax = as.Date("1997-01-01"), 
            ymin = 0, ymax = 1, alpha = .2)
```

¿Qué tipo de observación es esta?

Si quisiéramos gráficar la fecha de un censo:

```{r}
mi_diagrama  + 
   geom_vline(xintercept = as.Date("1995-11-05"), colour = "red")
```

Si queremos poner una edad exacta:

```{r}
mi_diagrama  + 
   geom_hline(yintercept = 4, colour = "red")
```

## `{IPUMSr}`

<https://international.ipums.org/international/>

Vamos a utilizar los datos de la consulta que ya generé. Ustedes pueden cambiar sus países y variables, pero dejen edad y censo que utilizaremos el índice de whipple.

Pedí datos de la última ronda de censos de Argentina, Canadá y Costa Rica.

![Primer paso](ima/ipums1.png)

![Segundo paso](ima/ipums2.png)

![Tercer paso](ima/ipums3.png) Cuando ya tenemos el correito que nos dice incluso hasta cómo citar nuestra fuente, revisamos de nuevo nuestro "Dashboard"

![Descargar datos](ima/ipums4.png)

Tal como señala el código que podemos descargar de `{IPUMSr}`

```{r}
#NOTE: To load data, you must download both the extract's data and the DDI
# and also set the working directory to the folder with these files (or change the path below).

if (!require("ipumsr")) stop("Reading IPUMS data into R requires the ipumsr package. It can be installed using the following command: install.packages('ipumsr')")

ddi <- read_ipums_ddi("ipumsi_00006.xml")
data <- read_ipums_micro(ddi)
```

Revisemos la base

```{r}
skimr::skim(data)
```

```{r}
data <- data %>%
  mutate(COUNTRY_factor = as_label(COUNTRY),
         sex0=as_label(SEX),
         eda5=as_label(AGE2))
```

Vamos a hacer una pirámide para comparar estas poblaciones

```{r}
data %>% 
  mutate(pop_pi=if_else(SEX==1,
                       -PERWT, 
                       PERWT)) %>% 
  ggplot(aes(eda5, fill=sex0, weight=pop_pi))+
    geom_bar() + coord_flip() +
  labs(y="Poblacion", x="Grupos de edad") +
  scale_fill_brewer(palette = "Set2") + 
  theme_light() + facet_wrap(~COUNTRY_factor, scales="free") 

```

## Indíces de atracción

### Paquete `{fmsb}`

Revisemos el índice de Whipple para Costa Rica:

```{r}
# sin expandir
data %>%
  filter(COUNTRY_factor=="Costa Rica") %>% 
  mutate(eda=as.numeric(AGE)) %>% 
  mutate(eda_w=if_else(
    eda>63,
    63,
    eda)) %>% 
  with(fmsb::WhipplesIndex(eda_w))
```

```{r}
# con expandir
data %>%
  filter(COUNTRY_factor=="Costa Rica") %>% 
  mutate(eda=as.numeric(AGE)) %>% 
  mutate(eda_w=if_else(
    eda>63,
    63,
    eda)) %>% 
    count(eda_w, wt=PERWT) %>% 
  with(fmsb::WhipplesIndex(n))
```

### Paquete `{DemoTools}`

#### Indice de Whipple

Lo más facil es tener nuestros datos agregados

```{r}
data_wide<- data%>%
 filter(COUNTRY_factor=="Costa Rica") %>% 
  mutate(eda=as.numeric(AGE)) %>% 
  count(eda, sex0, weight = PERWT) %>% 
  pivot_wider(names_from = sex0, values_from = n)

```

Con formato *tidy*

```{r}

 data_wide %>% 
  with(DemoTools::check_heaping_whipple(Value=Male,
                             Age=eda, 
                             ageMin = 25, 
                             ageMax = 60, 
                             digit = c(0, 5)))
```

Sin formato *tidy*

```{r}

check_heaping_whipple(Value=data_wide$Male,
                      Age= data_wide$eda, 
                      ageMin = 25, 
                      ageMax = 60, 
                      digit = c(0, 5))

```

#### Noumbissi

```{r}
check_heaping_noumbissi(Value=data_wide$Male,
                        Age= data_wide$eda,
                        ageMin = 30, 
                        ageMax = 60,
                        digit = 0)

```

Un loop para todos los dígitos:

```{r}

for(i in 0:2){
  Ni<-check_heaping_noumbissi(Value = data_wide$Male,
                              Age = data_wide$eda, 
                              ageMin = 30+i, 
                              ageMax = 60+i, 
                              digit = i)
  names(Ni)<-i
  print(Ni)
}

for(i in 3:9) {
  Ni<-check_heaping_noumbissi(Value = data_wide$Male,
                              Age = data_wide$eda, 
                              ageMin = 20+i,
                              ageMax = 50+i, 
                              digit = i)
  names(Ni)<-i
  print(Ni)
}

```

#### Spoorrenberg

> Using the digit-specific modified Whipple's index, this index summarizes all age preference and avoidance effects by taking the sum of the absolute differences between digit-specific Whipple's index and 1 (counting all differences as positive).

```{r}
spoor<-check_heaping_spoorenberg(Value = data_wide$Male,
                                 Age = data_wide$eda,  
                                 ageMin = 23, 
                                 ageMax = 62)
spoor
```

#### Indice de Myers

```{r}
check_heaping_myers(Value = data_wide$Male,
                    Age = data_wide$eda, 
                    ageMin = 10, 
                    ageMax = 89, 
                    method="pasex")

```
